/* Generated by CIL v. 1.7.3 */
/* print_CIL_Input is false */

int _ltl2ba_active_a  =    0;
int _ltl2ba_atomic_a  =    0;
int _ltl2ba_active_r  =    0;
int _ltl2ba_atomic_r  =    0;
void __ESBMC_atomic_end(void) ;
void __ESBMC_atomic_begin(void) ;
int _ltl2ba_state_var  =    0;
int _ltl2ba_sym_to_id(void) ;
void _ltl2ba_transition(void) ;
void _ltl2ba_result(void) ;
#line 63 "/usr/include/bits/thread-shared-types.h"
struct __pthread_internal_list {
   struct __pthread_internal_list *__prev ;
   struct __pthread_internal_list *__next ;
};
#line 63 "/usr/include/bits/thread-shared-types.h"
typedef struct __pthread_internal_list __pthread_list_t;
#line 99 "/usr/include/bits/thread-shared-types.h"
struct __pthread_mutex_s {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   unsigned int __nusers ;
   int __kind ;
   short __spins ;
   short __elision ;
   __pthread_list_t __list ;
};
#line 27 "/usr/include/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 56 "/usr/include/bits/pthreadtypes.h"
union pthread_attr_t {
   char __size[56] ;
   long __align ;
};
#line 62 "/usr/include/bits/pthreadtypes.h"
typedef union pthread_attr_t pthread_attr_t;
#line 67 "/usr/include/bits/pthreadtypes.h"
union __anonunion_pthread_mutex_t_9 {
   struct __pthread_mutex_s __data ;
   char __size[40] ;
   long __align ;
};
#line 67 "/usr/include/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutex_t_9 pthread_mutex_t;
#line 234 "/usr/include/pthread.h"
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,3))) pthread_create)(pthread_t * __restrict  __newthread ,
                                                                                             pthread_attr_t const   * __restrict  __attr ,
                                                                                             void *(*__start_routine)(void * ) ,
                                                                                             void * __restrict  __arg ) ;
#line 243
extern  __attribute__((__noreturn__)) void pthread_exit(void *__retval ) ;
#line 251
extern int pthread_join(pthread_t __th , void **__thread_return ) ;
#line 763
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1))) pthread_mutex_lock)(pthread_mutex_t *__mutex ) ;
#line 774
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1))) pthread_mutex_unlock)(pthread_mutex_t *__mutex ) ;
#line 4 "/home/nephe/Documents/Research/dev/baProduct/test/answer_simple_valid/answer_simple_valid.c"
pthread_mutex_t sem  =    {{0, 0U, 0, 0U, 0, (short)0, (short)0, {(struct __pthread_internal_list *)0, (struct __pthread_internal_list *)0}}};
#line 5 "/home/nephe/Documents/Research/dev/baProduct/test/answer_simple_valid/answer_simple_valid.c"
pthread_mutex_t sem2  =    {{0, 0U, 0, 0U, 0, (short)0, (short)0, {(struct __pthread_internal_list *)0, (struct __pthread_internal_list *)0}}};
#line 6 "/home/nephe/Documents/Research/dev/baProduct/test/answer_simple_valid/answer_simple_valid.c"
int ans  ;
#line 7 "/home/nephe/Documents/Research/dev/baProduct/test/answer_simple_valid/answer_simple_valid.c"
int req  ;
#line 9 "/home/nephe/Documents/Research/dev/baProduct/test/answer_simple_valid/answer_simple_valid.c"
int requete(int r ) 
{ 


  {
#line 10
  return (r != 0);
}
}
#line 13 "/home/nephe/Documents/Research/dev/baProduct/test/answer_simple_valid/answer_simple_valid.c"
int answer(int a ) 
{ 


  {
#line 14
  return (a != 0);
}
}
#line 17 "/home/nephe/Documents/Research/dev/baProduct/test/answer_simple_valid/answer_simple_valid.c"
void *client(void *d ) 
{ 
  int myVar ;

  {
  {
#line 20
  __ESBMC_atomic_begin();
#line 20
  _ltl2ba_atomic_r = requete(req);
#line 20
  _ltl2ba_active_r = (_Bool)1;
#line 20
  _ltl2ba_transition();
#line 20
  __ESBMC_atomic_end();
  cb: 
  {
#line 20
  __ESBMC_atomic_begin();
#line 20
  req = 42;
#line 20
  _ltl2ba_atomic_r = requete(req);
#line 20
  _ltl2ba_transition();
#line 20
  __ESBMC_atomic_end();
#line 21
  pthread_mutex_unlock(& sem);
#line 22
  pthread_mutex_lock(& sem2);
#line 23
  myVar = ans;
#line 24
  __ESBMC_atomic_begin();
#line 24
  ans = 0;
#line 24
  if (_ltl2ba_active_a) {
#line 24
    _ltl2ba_atomic_a = answer(ans);
  }
#line 24
  _ltl2ba_transition();
#line 24
  __ESBMC_atomic_end();
  }
  }
  {
#line 26
  __ESBMC_atomic_begin();
#line 26
  _ltl2ba_atomic_r = (_Bool)0;
#line 26
  _ltl2ba_active_r = (_Bool)0;
#line 26
  _ltl2ba_transition();
#line 26
  __ESBMC_atomic_end();
  ce: 
#line 26
  pthread_exit((void *)0);
  }
}
}
#line 29 "/home/nephe/Documents/Research/dev/baProduct/test/answer_simple_valid/answer_simple_valid.c"
void *server(void *d ) 
{ 


  {
  {
#line 32
  __ESBMC_atomic_begin();
#line 32
  _ltl2ba_atomic_a = answer(ans);
#line 32
  _ltl2ba_active_a = (_Bool)1;
#line 32
  _ltl2ba_transition();
#line 32
  __ESBMC_atomic_end();
  sb: 
  {
#line 32
  pthread_mutex_lock(& sem);
#line 33
  __ESBMC_atomic_begin();
#line 33
  ans = req;
#line 33
  _ltl2ba_atomic_a = answer(ans);
#line 33
  _ltl2ba_transition();
#line 33
  __ESBMC_atomic_end();
#line 34
  __ESBMC_atomic_begin();
#line 34
  req = 0;
#line 34
  if (_ltl2ba_active_r) {
#line 34
    _ltl2ba_atomic_r = requete(req);
  }
#line 34
  _ltl2ba_transition();
#line 34
  __ESBMC_atomic_end();
#line 35
  pthread_mutex_unlock(& sem2);
  }
  }
  {
#line 37
  __ESBMC_atomic_begin();
#line 37
  _ltl2ba_atomic_a = (_Bool)0;
#line 37
  _ltl2ba_active_a = (_Bool)0;
#line 37
  _ltl2ba_transition();
#line 37
  __ESBMC_atomic_end();
  se: 
#line 37
  pthread_exit((void *)0);
  }
}
}
#line 40 "/home/nephe/Documents/Research/dev/baProduct/test/answer_simple_valid/answer_simple_valid.c"
int main(void) 
{ 
  pthread_t t1 ;
  pthread_t t2 ;

  {
#line 43
  pthread_mutex_lock(& sem);
#line 44
  pthread_mutex_lock(& sem2);
#line 45
  pthread_create((pthread_t */* __restrict  */)(& t2), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & server, (void */* __restrict  */)((void *)0));
#line 46
  pthread_create((pthread_t */* __restrict  */)(& t1), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & client, (void */* __restrict  */)((void *)0));
#line 47
  pthread_join(t1, (void **)((void *)0));
#line 48
  pthread_join(t2, (void **)((void *)0));
  {
  __ESBMC_atomic_begin();
  _ltl2ba_result();
  __ESBMC_atomic_end();
#line 49
  return (0);
  }
}
}
void _ltl2ba_transition() {
  int choice = nondet_uint(); 
  switch (_ltl2ba_state_var) {
  case 0:
    if (choice == 0) {
      __ESBMC_assume(_ltl2ba_atomic_r && !_ltl2ba_atomic_a);
      _ltl2ba_state_var = 1;
    } else if (choice == 1) {
       __ESBMC_assume(1);
       _ltl2ba_state_var = 0;
    } else {
       __ESBMC_assume(0);
    }
    break;
  case 1:
    if (choice == 0) {
      __ESBMC_assume(!_ltl2ba_atomic_a);
      _ltl2ba_state_var = 1;
    } else {
       __ESBMC_assume(0);
    }
    break;
  }
}

int _ltl2ba_surely_reject[2] = {0, 0};

int _ltl2ba_surely_accept[2] = {0, 0};

int _ltl2ba_stutter_accept[8] = {
   0, 1,
   0, 0,
   1, 1,
   0, 0,
};

int _ltl2ba_sym_to_id() {
   int id = 0;
   id |= (_ltl2ba_atomic_a << 0);
   id |= (_ltl2ba_atomic_r << 1);
   return id; 
}

void _ltl2ba_result() {
   int reject_sure = _ltl2ba_surely_accept[_ltl2ba_state_var];
   __ESBMC_assert(!reject_sure, "ERROR SURE");
   
   int id = _ltl2ba_sym_to_id();
   int accept_stutter =_ltl2ba_stutter_accept[id * 2 + _ltl2ba_state_var];
   __ESBMC_assert(!accept_stutter, "ERROR MAYBE");
   int valid_sure = _ltl2ba_surely_reject[_ltl2ba_state_var];
   __ESBMC_assert(valid_sure, "VALID MAYBE");
   
   }


