/* Generated by CIL v. 1.7.3 */
/* print_CIL_Input is false */

int _ltl2ba_active_q  =    0;
int _ltl2ba_atomic_q  =    0;
int _ltl2ba_active_r  =    0;
int _ltl2ba_atomic_r  =    0;
int _ltl2ba_active_p  =    0;
int _ltl2ba_atomic_p  =    0;
void __ESBMC_atomic_end(void) ;
void __ESBMC_atomic_begin(void) ;
int _ltl2ba_state_var  =    0;
int _ltl2ba_sym_to_id(void) ;
void _ltl2ba_transition(void) ;
void _ltl2ba_result(void) ;
#line 2 "/home/nephe/Documents/Research/dev/baProduct/test/automaton_3/automaton_3.c"
int fp(void) 
{ 


  {
#line 3
  return (1);
}
}
#line 6 "/home/nephe/Documents/Research/dev/baProduct/test/automaton_3/automaton_3.c"
int fr(void) 
{ 


  {
#line 7
  return (1);
}
}
#line 10 "/home/nephe/Documents/Research/dev/baProduct/test/automaton_3/automaton_3.c"
int fq(void) 
{ 


  {
#line 11
  return (1);
}
}
#line 14 "/home/nephe/Documents/Research/dev/baProduct/test/automaton_3/automaton_3.c"
int main(void) 
{ 


  {
#line 14
  __ESBMC_atomic_begin();
#line 14
  _ltl2ba_atomic_p = fp();
#line 14
  _ltl2ba_atomic_r = fr();
#line 14
  _ltl2ba_atomic_q = fq();
#line 14
  _ltl2ba_transition();
#line 14
  __ESBMC_atomic_end();
  {
  {
  __ESBMC_atomic_begin();
  _ltl2ba_result();
  __ESBMC_atomic_end();
#line 15
  return (0);
  }
  }
}
}
void _ltl2ba_transition() {
  int choice = nondet_uint(); 
  switch (_ltl2ba_state_var) {
  case 0:
    if (choice == 0) {
      __ESBMC_assume(_ltl2ba_atomic_p && !_ltl2ba_atomic_r && !_ltl2ba_atomic_q);
      _ltl2ba_state_var = 1;
    } else if (choice == 1) {
       __ESBMC_assume(!_ltl2ba_atomic_r);
       _ltl2ba_state_var = 0;
    } else {
       __ESBMC_assume(0);
    }
    break;
  case 1:
    if (choice == 0) {
      __ESBMC_assume(_ltl2ba_atomic_r);
      _ltl2ba_state_var = 2;
    } else if (choice == 1) {
       __ESBMC_assume(!_ltl2ba_atomic_q);
       _ltl2ba_state_var = 1;
    } else {
       __ESBMC_assume(0);
    }
    break;
  case 2:
    __ESBMC_assert(0, "ERROR_SURE");
    break;
  }
}

int _ltl2ba_surely_reject[3] = {0, 0, 0};

int _ltl2ba_surely_accept[3] = {0, 0, 1};

int _ltl2ba_stutter_accept[24] = {
   0, 0, 1,
   0, 1, 1,
   0, 0, 1,
   0, 1, 1,
   0, 0, 1,
   0, 1, 1,
   0, 0, 1,
   0, 1, 1,
};

int _ltl2ba_sym_to_id() {
   int id = 0;
   id |= (_ltl2ba_atomic_q << 1);
   id |= (_ltl2ba_atomic_p << 2);
   id |= (_ltl2ba_atomic_r << 0);
   return id; 
}

void _ltl2ba_result() {
   int reject_sure = _ltl2ba_surely_accept[_ltl2ba_state_var];
   __ESBMC_assert(!reject_sure, "ERROR SURE");
   
   int id = _ltl2ba_sym_to_id();
   int accept_stutter =_ltl2ba_stutter_accept[id * 3 + _ltl2ba_state_var];
   __ESBMC_assert(!accept_stutter, "ERROR MAYBE");
   int valid_sure = _ltl2ba_surely_reject[_ltl2ba_state_var];
   __ESBMC_assert(valid_sure, "VALID MAYBE");
   
   }


