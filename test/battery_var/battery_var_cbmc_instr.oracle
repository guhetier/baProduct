/* Generated by CIL v. 1.7.3 */
/* print_CIL_Input is false */

int *_ltl2ba_pointer_thread2_energy_stored  =    (int *)0;
int *_ltl2ba_pointer_thread1_energy_stored  =    (int *)0;
int _ltl2ba_active_p2  =    0;
int _ltl2ba_atomic_p2  =    0;
int _ltl2ba_active_p1  =    0;
int _ltl2ba_atomic_p1  =    0;
void __CPROVER_atomic_end(void) ;
void __CPROVER_atomic_begin(void) ;
int _ltl2ba_state_var  =    0;
int _ltl2ba_sym_to_id(void) ;
void _ltl2ba_transition(void) ;
void _ltl2ba_result(void) ;
#line 60 "/usr/include/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 63 "/usr/include/bits/pthreadtypes.h"
union pthread_attr_t {
   char __size[56] ;
   long __align ;
};
#line 69 "/usr/include/bits/pthreadtypes.h"
typedef union pthread_attr_t pthread_attr_t;
#line 234 "/usr/include/pthread.h"
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,3))) pthread_create)(pthread_t * __restrict  __newthread ,
                                                                                             pthread_attr_t const   * __restrict  __attr ,
                                                                                             void *(*__start_routine)(void * ) ,
                                                                                             void * __restrict  __arg ) ;
#line 243
extern  __attribute__((__noreturn__)) void pthread_exit(void *__retval ) ;
#line 251
extern int pthread_join(pthread_t __th , void **__thread_return ) ;
#line 3 "/home/nephe/Documents/Research/dev/baProduct/test/battery_var/battery_var.c"
int fp1(int e ) 
{ 


  {
#line 4
  return (e > 10);
}
}
#line 7 "/home/nephe/Documents/Research/dev/baProduct/test/battery_var/battery_var.c"
int fp2(int e ) 
{ 


  {
#line 8
  return (e < 5);
}
}
#line 11 "/home/nephe/Documents/Research/dev/baProduct/test/battery_var/battery_var.c"
void *thread1(void *d ) 
{ 
  int energy_stored ;
  int i ;

  {
#line 12
  energy_stored = 20;
#line 13
  i = 0;
#line 15
  while (i < 3) {
#line 16
    i ++;
    {
#line 17
    __CPROVER_atomic_begin();
#line 17
    _ltl2ba_pointer_thread1_energy_stored = & energy_stored;
#line 17
    _ltl2ba_atomic_p1 = fp1(*_ltl2ba_pointer_thread1_energy_stored);
#line 17
    _ltl2ba_active_p1 = (_Bool)1;
#line 17
    _ltl2ba_transition();
#line 17
    __CPROVER_atomic_end();
    t1: 
#line 17
    while (energy_stored > 0) {
#line 18
      __CPROVER_atomic_begin();
#line 18
      energy_stored --;
#line 18
      _ltl2ba_atomic_p1 = fp1(*_ltl2ba_pointer_thread1_energy_stored);
#line 18
      _ltl2ba_transition();
#line 18
      __CPROVER_atomic_end();
    }
    }
#line 20
    __CPROVER_atomic_begin();
#line 20
    energy_stored = 20;
#line 20
    _ltl2ba_atomic_p1 = fp1(*_ltl2ba_pointer_thread1_energy_stored);
#line 20
    _ltl2ba_transition();
#line 20
    __CPROVER_atomic_end();
    {
    __CPROVER_atomic_begin();
    _ltl2ba_atomic_p1 = (_Bool)0;
    _ltl2ba_active_p1 = (_Bool)0;
    _ltl2ba_transition();
    __CPROVER_atomic_end();
    e1: 
    {

    }
    }
  }
#line 24
  pthread_exit((void *)0);
}
}
#line 27 "/home/nephe/Documents/Research/dev/baProduct/test/battery_var/battery_var.c"
void *thread2(void *d ) 
{ 
  int energy_stored ;
  int i ;

  {
#line 29
  energy_stored = 20;
#line 30
  i = 0;
#line 31
  while (i < 3) {
#line 32
    i ++;
    {
#line 33
    __CPROVER_atomic_begin();
#line 33
    _ltl2ba_pointer_thread2_energy_stored = & energy_stored;
#line 33
    _ltl2ba_atomic_p2 = fp2(*_ltl2ba_pointer_thread2_energy_stored);
#line 33
    _ltl2ba_active_p2 = (_Bool)1;
#line 33
    _ltl2ba_transition();
#line 33
    __CPROVER_atomic_end();
    t2: 
#line 33
    while (energy_stored > 0) {
#line 34
      __CPROVER_atomic_begin();
#line 34
      energy_stored --;
#line 34
      _ltl2ba_atomic_p2 = fp2(*_ltl2ba_pointer_thread2_energy_stored);
#line 34
      _ltl2ba_transition();
#line 34
      __CPROVER_atomic_end();
    }
    }
#line 36
    __CPROVER_atomic_begin();
#line 36
    energy_stored = 20;
#line 36
    _ltl2ba_atomic_p2 = fp2(*_ltl2ba_pointer_thread2_energy_stored);
#line 36
    _ltl2ba_transition();
#line 36
    __CPROVER_atomic_end();
    {
    __CPROVER_atomic_begin();
    _ltl2ba_atomic_p2 = (_Bool)0;
    _ltl2ba_active_p2 = (_Bool)0;
    _ltl2ba_transition();
    __CPROVER_atomic_end();
    e2: 
    {

    }
    }
  }
#line 40
  pthread_exit((void *)0);
}
}
#line 43 "/home/nephe/Documents/Research/dev/baProduct/test/battery_var/battery_var.c"
int main(int argc , char **argv ) 
{ 
  pthread_t t1 ;
  pthread_t t2 ;

  {
#line 46
  pthread_create((pthread_t */* __restrict  */)(& t1), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & thread1, (void */* __restrict  */)((void *)0));
#line 47
  pthread_create((pthread_t */* __restrict  */)(& t2), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & thread2, (void */* __restrict  */)((void *)0));
#line 48
  pthread_join(t1, (void **)((void *)0));
#line 49
  pthread_join(t2, (void **)((void *)0));
  {
  __CPROVER_atomic_begin();
  _ltl2ba_result();
  __CPROVER_atomic_end();
#line 50
  return (0);
  }
}
}
void _ltl2ba_transition() {
  int choice = nondet_uint(); 
  switch (_ltl2ba_state_var) {
  case 0:
    if (choice == 0) {
      __CPROVER_assume(_ltl2ba_atomic_p1 && _ltl2ba_atomic_p2);
      _ltl2ba_state_var = 1;
    } else if (choice == 1) {
       __CPROVER_assume(1);
       _ltl2ba_state_var = 0;
    } else {
       __CPROVER_assume(0);
    }
    break;
  case 1:
    __CPROVER_assert(0, "ERROR_SURE");
    break;
  }
}

int _ltl2ba_surely_reject[2] = {0, 0};

int _ltl2ba_surely_accept[2] = {0, 1};

int _ltl2ba_stutter_accept[8] = {
   0, 1,
   0, 1,
   0, 1,
   1, 1,
};

int _ltl2ba_sym_to_id() {
   int id = 0;
   id |= (_ltl2ba_atomic_p2 << 1);
   id |= (_ltl2ba_atomic_p1 << 0);
   return id; 
}

void _ltl2ba_result() {
   int reject_sure = _ltl2ba_surely_accept[_ltl2ba_state_var];
   __CPROVER_assert(!reject_sure, "ERROR SURE");
   
   int id = _ltl2ba_sym_to_id();
   int accept_stutter =_ltl2ba_stutter_accept[id * 2 + _ltl2ba_state_var];
   __CPROVER_assert(!accept_stutter, "ERROR MAYBE");
   int valid_sure = _ltl2ba_surely_reject[_ltl2ba_state_var];
   __CPROVER_assert(valid_sure, "VALID MAYBE");
   
   }


