/* Generated by CIL v. 1.7.3 */
/* print_CIL_Input is false */

int *_ltl2ba_pointer_signal2_status  =    (int *)0;
int *_ltl2ba_pointer_signal1_status  =    (int *)0;
int _ltl2ba_active_green2  =    0;
int _ltl2ba_atomic_green2  =    0;
int _ltl2ba_active_green1  =    0;
int _ltl2ba_atomic_green1  =    0;
void __ESBMC_atomic_end(void) ;
void __ESBMC_atomic_begin(void) ;
int _ltl2ba_state_var  =    0;
int _ltl2ba_sym_to_id(void) ;
void _ltl2ba_transition(void) ;
void _ltl2ba_result(void) ;
#line 60 "/usr/include/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 63 "/usr/include/bits/pthreadtypes.h"
union pthread_attr_t {
   char __size[56] ;
   long __align ;
};
#line 69 "/usr/include/bits/pthreadtypes.h"
typedef union pthread_attr_t pthread_attr_t;
#line 75 "/usr/include/bits/pthreadtypes.h"
struct __pthread_internal_list {
   struct __pthread_internal_list *__prev ;
   struct __pthread_internal_list *__next ;
};
#line 75 "/usr/include/bits/pthreadtypes.h"
typedef struct __pthread_internal_list __pthread_list_t;
#line 90 "/usr/include/bits/pthreadtypes.h"
struct __pthread_mutex_s {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   unsigned int __nusers ;
   int __kind ;
   short __spins ;
   short __elision ;
   __pthread_list_t __list ;
};
#line 90 "/usr/include/bits/pthreadtypes.h"
union __anonunion_pthread_mutex_t_3 {
   struct __pthread_mutex_s __data ;
   char __size[40] ;
   long __align ;
};
#line 90 "/usr/include/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutex_t_3 pthread_mutex_t;
#line 234 "/usr/include/pthread.h"
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,3))) pthread_create)(pthread_t * __restrict  __newthread ,
                                                                                             pthread_attr_t const   * __restrict  __attr ,
                                                                                             void *(*__start_routine)(void * ) ,
                                                                                             void * __restrict  __arg ) ;
#line 243
extern  __attribute__((__noreturn__)) void pthread_exit(void *__retval ) ;
#line 251
extern int pthread_join(pthread_t __th , void **__thread_return ) ;
#line 763
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1))) pthread_mutex_lock)(pthread_mutex_t *__mutex ) ;
#line 774
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1))) pthread_mutex_unlock)(pthread_mutex_t *__mutex ) ;
#line 447 "/usr/include/unistd.h"
extern unsigned int sleep(unsigned int __seconds ) ;
#line 365 "/usr/include/stdio.h"
extern int printf(char const   * __restrict  __format  , ...) ;
#line 11 "/home/nephe/Documents/Research/dev/baProduct/test/crossing_GF_green/crossing_GF_green.c"
pthread_mutex_t m1  =    {{0, 0U, 0, 0U, 0, (short)0, (short)0, {(struct __pthread_internal_list *)0, (struct __pthread_internal_list *)0}}};
#line 12 "/home/nephe/Documents/Research/dev/baProduct/test/crossing_GF_green/crossing_GF_green.c"
pthread_mutex_t m2  =    {{0, 0U, 0, 0U, 0, (short)0, (short)0, {(struct __pthread_internal_list *)0, (struct __pthread_internal_list *)0}}};
#line 14 "/home/nephe/Documents/Research/dev/baProduct/test/crossing_GF_green/crossing_GF_green.c"
int isGreen1(int s ) 
{ 


  {
#line 15
  return (s == 0);
}
}
#line 18 "/home/nephe/Documents/Research/dev/baProduct/test/crossing_GF_green/crossing_GF_green.c"
int isGreen2(int s ) 
{ 


  {
#line 19
  return (s == 0);
}
}
#line 22 "/home/nephe/Documents/Research/dev/baProduct/test/crossing_GF_green/crossing_GF_green.c"
void *signal1(void *d ) 
{ 
  int status ;

  {
#line 23
  status = 0;
  {
#line 25
  __ESBMC_atomic_begin();
#line 25
  _ltl2ba_pointer_signal1_status = & status;
#line 25
  _ltl2ba_atomic_green1 = isGreen1(*_ltl2ba_pointer_signal1_status);
#line 25
  _ltl2ba_active_green1 = (_Bool)1;
#line 25
  _ltl2ba_transition();
#line 25
  __ESBMC_atomic_end();
  b1: 
#line 25
  printf((char const   */* __restrict  */)"1 -> GREEN\n");
#line 26
  sleep(2U);
#line 27
  __ESBMC_atomic_begin();
#line 27
  status = 1;
#line 27
  _ltl2ba_atomic_green1 = isGreen1(*_ltl2ba_pointer_signal1_status);
#line 27
  _ltl2ba_transition();
#line 27
  __ESBMC_atomic_end();
#line 28
  printf((char const   */* __restrict  */)"1 -> ORANGE\n");
#line 29
  sleep(1U);
#line 30
  __ESBMC_atomic_begin();
#line 30
  status = 2;
#line 30
  _ltl2ba_atomic_green1 = isGreen1(*_ltl2ba_pointer_signal1_status);
#line 30
  _ltl2ba_transition();
#line 30
  __ESBMC_atomic_end();
#line 31
  printf((char const   */* __restrict  */)"1 -> RED\n");
#line 32
  pthread_mutex_unlock(& m1);
#line 34
  pthread_mutex_lock(& m2);
#line 35
  __ESBMC_atomic_begin();
#line 35
  status = 0;
#line 35
  _ltl2ba_atomic_green1 = isGreen1(*_ltl2ba_pointer_signal1_status);
#line 35
  _ltl2ba_transition();
#line 35
  __ESBMC_atomic_end();
#line 36
  printf((char const   */* __restrict  */)"1 -> GREEN\n");
#line 37
  sleep(2U);
#line 38
  __ESBMC_atomic_begin();
#line 38
  status = 1;
#line 38
  _ltl2ba_atomic_green1 = isGreen1(*_ltl2ba_pointer_signal1_status);
#line 38
  _ltl2ba_transition();
#line 38
  __ESBMC_atomic_end();
#line 39
  printf((char const   */* __restrict  */)"1 -> ORANGE\n");
#line 40
  sleep(1U);
#line 41
  __ESBMC_atomic_begin();
#line 41
  status = 2;
#line 41
  _ltl2ba_atomic_green1 = isGreen1(*_ltl2ba_pointer_signal1_status);
#line 41
  _ltl2ba_transition();
#line 41
  __ESBMC_atomic_end();
#line 42
  printf((char const   */* __restrict  */)"1 -> RED\n");
#line 43
  pthread_mutex_unlock(& m1);
  }
  {
#line 56
  __ESBMC_atomic_begin();
#line 56
  _ltl2ba_atomic_green1 = (_Bool)0;
#line 56
  _ltl2ba_active_green1 = (_Bool)0;
#line 56
  _ltl2ba_transition();
#line 56
  __ESBMC_atomic_end();
  e1: 
#line 56
  pthread_exit((void *)0);
  }
}
}
#line 59 "/home/nephe/Documents/Research/dev/baProduct/test/crossing_GF_green/crossing_GF_green.c"
void *signal2(void *d ) 
{ 
  int status ;

  {
#line 60
  status = 2;
  {
#line 63
  __ESBMC_atomic_begin();
#line 63
  _ltl2ba_pointer_signal2_status = & status;
#line 63
  _ltl2ba_atomic_green2 = isGreen2(*_ltl2ba_pointer_signal2_status);
#line 63
  _ltl2ba_active_green2 = (_Bool)1;
#line 63
  _ltl2ba_transition();
#line 63
  __ESBMC_atomic_end();
  b2: 
#line 63
  pthread_mutex_lock(& m1);
#line 64
  __ESBMC_atomic_begin();
#line 64
  status = 0;
#line 64
  _ltl2ba_atomic_green2 = isGreen2(*_ltl2ba_pointer_signal2_status);
#line 64
  _ltl2ba_transition();
#line 64
  __ESBMC_atomic_end();
#line 65
  printf((char const   */* __restrict  */)"2 -> GREEN\n");
#line 66
  sleep(2U);
#line 67
  __ESBMC_atomic_begin();
#line 67
  status = 1;
#line 67
  _ltl2ba_atomic_green2 = isGreen2(*_ltl2ba_pointer_signal2_status);
#line 67
  _ltl2ba_transition();
#line 67
  __ESBMC_atomic_end();
#line 68
  printf((char const   */* __restrict  */)"2 -> ORANGE\n");
#line 69
  sleep(1U);
#line 70
  __ESBMC_atomic_begin();
#line 70
  status = 2;
#line 70
  _ltl2ba_atomic_green2 = isGreen2(*_ltl2ba_pointer_signal2_status);
#line 70
  _ltl2ba_transition();
#line 70
  __ESBMC_atomic_end();
#line 71
  printf((char const   */* __restrict  */)"2 -> RED\n");
#line 72
  pthread_mutex_unlock(& m2);
  }
  {
#line 86
  __ESBMC_atomic_begin();
#line 86
  _ltl2ba_atomic_green2 = (_Bool)0;
#line 86
  _ltl2ba_active_green2 = (_Bool)0;
#line 86
  _ltl2ba_transition();
#line 86
  __ESBMC_atomic_end();
  e2: 
#line 86
  pthread_exit((void *)0);
  }
}
}
#line 89 "/home/nephe/Documents/Research/dev/baProduct/test/crossing_GF_green/crossing_GF_green.c"
int main(void) 
{ 
  pthread_t t1 ;
  pthread_t t2 ;

  {
#line 92
  printf((char const   */* __restrict  */)"Start\n");
#line 94
  pthread_mutex_lock(& m1);
#line 95
  pthread_mutex_lock(& m2);
#line 97
  printf((char const   */* __restrict  */)"Create\n");
#line 98
  pthread_create((pthread_t */* __restrict  */)(& t1), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & signal1, (void */* __restrict  */)((void *)0));
#line 99
  pthread_create((pthread_t */* __restrict  */)(& t2), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & signal2, (void */* __restrict  */)((void *)0));
#line 100
  printf((char const   */* __restrict  */)"Join\n");
#line 102
  pthread_join(t1, (void **)((void *)0));
#line 103
  pthread_join(t2, (void **)((void *)0));
#line 105
  printf((char const   */* __restrict  */)"End\n");
  {
  __ESBMC_atomic_begin();
  _ltl2ba_result();
  __ESBMC_atomic_end();
#line 107
  return (0);
  }
}
}
void _ltl2ba_transition() {
  int choice = nondet_uint(); 
  switch (_ltl2ba_state_var) {
  case 0:
    if (choice == 0) {
      __ESBMC_assume(!_ltl2ba_atomic_green2);
      _ltl2ba_state_var = 2;
    } else if (choice == 1) {
       __ESBMC_assume(!_ltl2ba_atomic_green1);
       _ltl2ba_state_var = 1;
    } else if (choice == 2) {
       __ESBMC_assume(1);
       _ltl2ba_state_var = 0;
    } else {
       __ESBMC_assume(0);
    }
    break;
  case 1:
    if (choice == 0) {
      __ESBMC_assume(!_ltl2ba_atomic_green1);
      _ltl2ba_state_var = 1;
    } else {
       __ESBMC_assume(0);
    }
    break;
  case 2:
    if (choice == 0) {
      __ESBMC_assume(!_ltl2ba_atomic_green2);
      _ltl2ba_state_var = 2;
    } else {
       __ESBMC_assume(0);
    }
    break;
  }
}

int _ltl2ba_surely_reject[3] = {0, 0, 0};

int _ltl2ba_surely_accept[3] = {0, 0, 0};

int _ltl2ba_stutter_accept[12] = {
   1, 1, 1,
   1, 0, 1,
   1, 1, 0,
   0, 0, 0,
};

int _ltl2ba_sym_to_id() {
   int id = 0;
   id |= (_ltl2ba_atomic_green1 << 0);
   id |= (_ltl2ba_atomic_green2 << 1);
   return id; 
}

void _ltl2ba_result() {
   int reject_sure = _ltl2ba_surely_accept[_ltl2ba_state_var];
   __ESBMC_assert(!reject_sure, "ERROR SURE");
   
   int id = _ltl2ba_sym_to_id();
   int accept_stutter =_ltl2ba_stutter_accept[id * 3 + _ltl2ba_state_var];
   __ESBMC_assert(!accept_stutter, "ERROR MAYBE");
   int valid_sure = _ltl2ba_surely_reject[_ltl2ba_state_var];
   __ESBMC_assert(valid_sure, "VALID MAYBE");
   
   }


