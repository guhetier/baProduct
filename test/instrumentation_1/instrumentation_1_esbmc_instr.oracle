/* Generated by CIL v. 1.7.3 */
/* print_CIL_Input is false */

int *_ltl2ba_pointer_t2_v4  =    (int *)0;
int *_ltl2ba_pointer_t1_v3  =    (int *)0;
char *_ltl2ba_pointer_t1_v2  =    (char *)0;
int *_ltl2ba_pointer_t1_v1  =    (int *)0;
int _ltl2ba_active_q  =    0;
int _ltl2ba_atomic_q  =    0;
int _ltl2ba_active_r  =    0;
int _ltl2ba_atomic_r  =    0;
int _ltl2ba_active_p  =    0;
int _ltl2ba_atomic_p  =    0;
void __ESBMC_atomic_end(void) ;
void __ESBMC_atomic_begin(void) ;
int _ltl2ba_state_var  =    0;
int _ltl2ba_sym_to_id(void) ;
void _ltl2ba_transition(void) ;
void _ltl2ba_result(void) ;
#line 27 "/usr/include/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 56 "/usr/include/bits/pthreadtypes.h"
union pthread_attr_t {
   char __size[56] ;
   long __align ;
};
#line 62 "/usr/include/bits/pthreadtypes.h"
typedef union pthread_attr_t pthread_attr_t;
#line 234 "/usr/include/pthread.h"
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,3))) pthread_create)(pthread_t * __restrict  __newthread ,
                                                                                             pthread_attr_t const   * __restrict  __attr ,
                                                                                             void *(*__start_routine)(void * ) ,
                                                                                             void * __restrict  __arg ) ;
#line 243
extern  __attribute__((__noreturn__)) void pthread_exit(void *__retval ) ;
#line 251
extern int pthread_join(pthread_t __th , void **__thread_return ) ;
#line 4 "/home/nephe/Documents/Research/dev/baProduct/test/instrumentation_1/instrumentation_1.c"
int fp(int a ) 
{ 


  {
#line 5
  return (1);
}
}
#line 8 "/home/nephe/Documents/Research/dev/baProduct/test/instrumentation_1/instrumentation_1.c"
int fr(int a , char b , double d ) 
{ 


  {
#line 9
  return (1);
}
}
#line 12 "/home/nephe/Documents/Research/dev/baProduct/test/instrumentation_1/instrumentation_1.c"
int fq(int a , int b , int c , int d ) 
{ 


  {
#line 13
  return (1);
}
}
#line 16 "/home/nephe/Documents/Research/dev/baProduct/test/instrumentation_1/instrumentation_1.c"
int g1  ;
#line 16 "/home/nephe/Documents/Research/dev/baProduct/test/instrumentation_1/instrumentation_1.c"
int g2  ;
#line 18 "/home/nephe/Documents/Research/dev/baProduct/test/instrumentation_1/instrumentation_1.c"
void *t1(void *d ) 
{ 
  int v1 ;
  int v3 ;
  char v2 ;

  {
#line 22
  v2 = (char )'c';
  {
#line 24
  __ESBMC_atomic_begin();
#line 24
  _ltl2ba_pointer_t1_v1 = & v1;
#line 24
  _ltl2ba_pointer_t1_v2 = & v2;
#line 24
  _ltl2ba_pointer_t1_v3 = & v3;
#line 24
  _ltl2ba_atomic_r = fr(*_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t1_v2, *_ltl2ba_pointer_t1_v3);
#line 24
  _ltl2ba_active_r = (_Bool)1;
#line 24
  _ltl2ba_transition();
#line 24
  __ESBMC_atomic_end();
  l1: 
  {
#line 24
  __ESBMC_atomic_begin();
#line 24
  v1 = g1;
#line 24
  _ltl2ba_atomic_r = fr(*_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t1_v2, *_ltl2ba_pointer_t1_v3);
#line 24
  _ltl2ba_transition();
#line 24
  __ESBMC_atomic_end();
#line 25
  __ESBMC_atomic_begin();
#line 25
  v3 = v1 + 1;
#line 25
  _ltl2ba_atomic_r = fr(*_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t1_v2, *_ltl2ba_pointer_t1_v3);
#line 25
  _ltl2ba_transition();
#line 25
  __ESBMC_atomic_end();
#line 26
  __ESBMC_atomic_begin();
#line 26
  g1 = 8;
#line 26
  _ltl2ba_atomic_p = fp(g1);
#line 26
  if (_ltl2ba_active_q) {
#line 26
    _ltl2ba_atomic_q = fq(g1, g2, *_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t2_v4);
  }
#line 26
  _ltl2ba_transition();
#line 26
  __ESBMC_atomic_end();
  }
  }
  {
#line 28
  __ESBMC_atomic_begin();
#line 28
  _ltl2ba_pointer_t1_v1 = & v1;
#line 28
  _ltl2ba_pointer_t2_v4 = & v4;
#line 28
  _ltl2ba_atomic_q = fq(g1, g2, *_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t2_v4);
#line 28
  _ltl2ba_active_q = (_Bool)1;
#line 28
  _ltl2ba_transition();
#line 28
  __ESBMC_atomic_end();
  lg1: 
#line 28
  __ESBMC_atomic_begin();
#line 28
  v2 = (char )'a';
#line 28
  _ltl2ba_atomic_r = fr(*_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t1_v2, *_ltl2ba_pointer_t1_v3);
#line 28
  _ltl2ba_transition();
#line 28
  __ESBMC_atomic_end();
#line 29
  __ESBMC_atomic_begin();
#line 29
  g2 = 3;
#line 29
  _ltl2ba_atomic_q = fq(g1, g2, *_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t2_v4);
#line 29
  _ltl2ba_transition();
#line 29
  __ESBMC_atomic_end();
#line 30
  __ESBMC_atomic_begin();
#line 30
  v1 = g1;
#line 30
  _ltl2ba_atomic_r = fr(*_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t1_v2, *_ltl2ba_pointer_t1_v3);
#line 30
  _ltl2ba_atomic_q = fq(g1, g2, *_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t2_v4);
#line 30
  _ltl2ba_transition();
#line 30
  __ESBMC_atomic_end();
  }
  {
#line 32
  __ESBMC_atomic_begin();
#line 32
  _ltl2ba_atomic_r = (_Bool)0;
#line 32
  _ltl2ba_active_r = (_Bool)0;
#line 32
  _ltl2ba_transition();
#line 32
  __ESBMC_atomic_end();
  l2: 
#line 32
  v3 = v1 + v3;
#line 33
  __ESBMC_atomic_begin();
#line 33
  g2 = 5;
#line 33
  _ltl2ba_atomic_q = fq(g1, g2, *_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t2_v4);
#line 33
  _ltl2ba_transition();
#line 33
  __ESBMC_atomic_end();
  }
  {
#line 35
  __ESBMC_atomic_begin();
#line 35
  _ltl2ba_atomic_q = (_Bool)0;
#line 35
  _ltl2ba_active_q = (_Bool)0;
#line 35
  _ltl2ba_transition();
#line 35
  __ESBMC_atomic_end();
  lg2: 
#line 35
  pthread_exit((void *)0);
  }
}
}
#line 38 "/home/nephe/Documents/Research/dev/baProduct/test/instrumentation_1/instrumentation_1.c"
void *t2(void *d ) 
{ 
  int v4 ;
  int k ;

  {
  {
#line 40
  __ESBMC_atomic_begin();
#line 40
  g1 = 4;
#line 40
  _ltl2ba_atomic_p = fp(g1);
#line 40
  if (_ltl2ba_active_q) {
#line 40
    _ltl2ba_atomic_q = fq(g1, g2, *_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t2_v4);
  }
#line 40
  _ltl2ba_transition();
#line 40
  __ESBMC_atomic_end();
#line 41
  v4 = 8;
#line 42
  __ESBMC_atomic_begin();
#line 42
  g2 = 5;
#line 42
  if (_ltl2ba_active_q) {
#line 42
    _ltl2ba_atomic_q = fq(g1, g2, *_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t2_v4);
  }
#line 42
  _ltl2ba_transition();
#line 42
  __ESBMC_atomic_end();
#line 43
  k = 42;
#line 44
  __ESBMC_atomic_begin();
#line 44
  g2 += k;
#line 44
  if (_ltl2ba_active_q) {
#line 44
    _ltl2ba_atomic_q = fq(g1, g2, *_ltl2ba_pointer_t1_v1, *_ltl2ba_pointer_t2_v4);
  }
#line 44
  _ltl2ba_transition();
#line 44
  __ESBMC_atomic_end();
#line 45
  pthread_exit((void *)0);
  }
}
}
#line 48 "/home/nephe/Documents/Research/dev/baProduct/test/instrumentation_1/instrumentation_1.c"
int main(void) 
{ 
  pthread_t th1 ;
  pthread_t th2 ;

  {
#line 48
  __ESBMC_atomic_begin();
#line 48
  _ltl2ba_atomic_p = fp(g1);
#line 48
  _ltl2ba_transition();
#line 48
  __ESBMC_atomic_end();
  {
#line 50
  pthread_create((pthread_t */* __restrict  */)(& th1), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & t1, (void */* __restrict  */)((void *)0));
#line 51
  pthread_create((pthread_t */* __restrict  */)(& th2), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & t2, (void */* __restrict  */)((void *)0));
#line 52
  pthread_join(th1, (void **)((void *)0));
#line 53
  pthread_join(th2, (void **)((void *)0));
  {
  __ESBMC_atomic_begin();
  _ltl2ba_result();
  __ESBMC_atomic_end();
#line 54
  return (0);
  }
  }
}
}
void _ltl2ba_transition() {
  int choice = nondet_uint(); 
  switch (_ltl2ba_state_var) {
  case 0:
    if (choice == 0) {
      __ESBMC_assume(!_ltl2ba_atomic_r);
      _ltl2ba_state_var = 1;
    } else if (choice == 1) {
       __ESBMC_assume(!_ltl2ba_atomic_q);
       _ltl2ba_state_var = 1;
    } else if (choice == 2) {
       __ESBMC_assume(!_ltl2ba_atomic_p);
       _ltl2ba_state_var = 1;
    } else if (choice == 3) {
       __ESBMC_assume(1);
       _ltl2ba_state_var = 0;
    } else {
       __ESBMC_assume(0);
    }
    break;
  case 1:
    __ESBMC_assert(0, "ERROR_SURE");
    break;
  }
}

int _ltl2ba_surely_reject[2] = {0, 0};

int _ltl2ba_surely_accept[2] = {0, 1};

int _ltl2ba_stutter_accept[16] = {
   1, 1,
   1, 1,
   1, 1,
   1, 1,
   1, 1,
   1, 1,
   1, 1,
   0, 1,
};

int _ltl2ba_sym_to_id() {
   int id = 0;
   id |= (_ltl2ba_atomic_q << 1);
   id |= (_ltl2ba_atomic_p << 0);
   id |= (_ltl2ba_atomic_r << 2);
   return id; 
}

void _ltl2ba_result() {
   int reject_sure = _ltl2ba_surely_accept[_ltl2ba_state_var];
   __ESBMC_assert(!reject_sure, "ERROR SURE");
   
   int id = _ltl2ba_sym_to_id();
   int accept_stutter =_ltl2ba_stutter_accept[id * 2 + _ltl2ba_state_var];
   __ESBMC_assert(!accept_stutter, "ERROR MAYBE");
   int valid_sure = _ltl2ba_surely_reject[_ltl2ba_state_var];
   __ESBMC_assert(valid_sure, "VALID MAYBE");
   
   }


