/* Generated by CIL v. 1.7.3 */
/* print_CIL_Input is false */

int *_ltl2ba_pointer_player2_f  =    (int *)0;
int *_ltl2ba_pointer_player1_f  =    (int *)0;
int _ltl2ba_active_w1  =    0;
int _ltl2ba_atomic_w1  =    1;
int _ltl2ba_active_e2  =    0;
int _ltl2ba_atomic_e2  =    0;
int _ltl2ba_active_e1  =    0;
int _ltl2ba_atomic_e1  =    0;
void __ESBMC_atomic_end(void) ;
void __ESBMC_atomic_begin(void) ;
int _ltl2ba_state_var  =    0;
int _ltl2ba_sym_to_id(void) ;
void _ltl2ba_transition(void) ;
void _ltl2ba_result(void) ;
#line 60 "/usr/include/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 63 "/usr/include/bits/pthreadtypes.h"
union pthread_attr_t {
   char __size[56] ;
   long __align ;
};
#line 69 "/usr/include/bits/pthreadtypes.h"
typedef union pthread_attr_t pthread_attr_t;
#line 234 "/usr/include/pthread.h"
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,3))) pthread_create)(pthread_t * __restrict  __newthread ,
                                                                                             pthread_attr_t const   * __restrict  __attr ,
                                                                                             void *(*__start_routine)(void * ) ,
                                                                                             void * __restrict  __arg ) ;
#line 243
extern  __attribute__((__noreturn__)) void pthread_exit(void *__retval ) ;
#line 251
extern int pthread_join(pthread_t __th , void **__thread_return ) ;
#line 4 "/home/nephe/Documents/Research/dev/baProduct/test/race/race.c"
int score  =    0;
#line 6 "/home/nephe/Documents/Research/dev/baProduct/test/race/race.c"
int p_ended(int f ) 
{ 


  {
#line 7
  return (f);
}
}
#line 10 "/home/nephe/Documents/Research/dev/baProduct/test/race/race.c"
int w1(int s ) 
{ 


  {
#line 11
  return (s == 10);
}
}
#line 14 "/home/nephe/Documents/Research/dev/baProduct/test/race/race.c"
void *player1(void *d ) 
{ 
  int f ;

  {
#line 15
  f = 0;
  {
#line 17
  __ESBMC_atomic_begin();
#line 17
  _ltl2ba_pointer_player1_f = & f;
#line 17
  _ltl2ba_atomic_e1 = p_ended(*_ltl2ba_pointer_player1_f);
#line 17
  _ltl2ba_active_e1 = (_Bool)1;
#line 17
  _ltl2ba_transition();
#line 17
  __ESBMC_atomic_end();
  r1b: 
#line 17
  __ESBMC_atomic_begin();
#line 17
  f = 1;
#line 17
  _ltl2ba_atomic_e1 = p_ended(*_ltl2ba_pointer_player1_f);
#line 17
  _ltl2ba_transition();
#line 17
  __ESBMC_atomic_end();
#line 18
  __ESBMC_atomic_begin();
#line 18
  score = 10;
#line 18
  _ltl2ba_atomic_w1 = w1(score);
#line 18
  _ltl2ba_transition();
#line 18
  __ESBMC_atomic_end();
  }
  {
#line 20
  __ESBMC_atomic_begin();
#line 20
  _ltl2ba_atomic_e1 = (_Bool)0;
#line 20
  _ltl2ba_active_e1 = (_Bool)0;
#line 20
  _ltl2ba_transition();
#line 20
  __ESBMC_atomic_end();
  r1e: 
#line 20
  pthread_exit((void *)0);
  }
}
}
#line 23 "/home/nephe/Documents/Research/dev/baProduct/test/race/race.c"
void *player2(void *d ) 
{ 
  int f ;

  {
#line 24
  f = 0;
  {
#line 26
  __ESBMC_atomic_begin();
#line 26
  _ltl2ba_pointer_player2_f = & f;
#line 26
  _ltl2ba_atomic_e2 = p_ended(*_ltl2ba_pointer_player2_f);
#line 26
  _ltl2ba_active_e2 = (_Bool)1;
#line 26
  _ltl2ba_transition();
#line 26
  __ESBMC_atomic_end();
  r2b: 
#line 26
  __ESBMC_atomic_begin();
#line 26
  score = -10;
#line 26
  _ltl2ba_atomic_w1 = w1(score);
#line 26
  _ltl2ba_transition();
#line 26
  __ESBMC_atomic_end();
#line 27
  __ESBMC_atomic_begin();
#line 27
  f = 1;
#line 27
  _ltl2ba_atomic_e2 = p_ended(*_ltl2ba_pointer_player2_f);
#line 27
  _ltl2ba_transition();
#line 27
  __ESBMC_atomic_end();
  }
  {
#line 29
  __ESBMC_atomic_begin();
#line 29
  _ltl2ba_atomic_e2 = (_Bool)0;
#line 29
  _ltl2ba_active_e2 = (_Bool)0;
#line 29
  _ltl2ba_transition();
#line 29
  __ESBMC_atomic_end();
  r2e: 
#line 29
  pthread_exit((void *)0);
  }
}
}
#line 32 "/home/nephe/Documents/Research/dev/baProduct/test/race/race.c"
int main(void) 
{ 
  pthread_t t1 ;
  pthread_t t2 ;

  {
#line 32
  __ESBMC_atomic_begin();
#line 32
  _ltl2ba_atomic_w1 = w1(score);
#line 32
  _ltl2ba_transition();
#line 32
  __ESBMC_atomic_end();
  {
#line 35
  pthread_create((pthread_t */* __restrict  */)(& t2), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & player1, (void */* __restrict  */)((void *)0));
#line 36
  pthread_create((pthread_t */* __restrict  */)(& t1), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & player2, (void */* __restrict  */)((void *)0));
#line 37
  pthread_join(t1, (void **)((void *)0));
#line 38
  pthread_join(t2, (void **)((void *)0));
  {
  __ESBMC_atomic_begin();
  _ltl2ba_result();
  __ESBMC_atomic_end();
#line 39
  return (0);
  }
  }
}
}
void _ltl2ba_transition() {
  int choice = nondet_uint(); 
  switch (_ltl2ba_state_var) {
  case 0:
    if (choice == 0) {
      __ESBMC_assume(_ltl2ba_atomic_e2 && !_ltl2ba_atomic_e1);
      _ltl2ba_state_var = 3;
    } else if (choice == 1) {
       __ESBMC_assume(1);
       _ltl2ba_state_var = 1;
    } else {
       __ESBMC_assume(0);
    }
    break;
  case 1:
    if (choice == 0) {
      __ESBMC_assume(_ltl2ba_atomic_e2 && !_ltl2ba_atomic_e1);
      _ltl2ba_state_var = 2;
    } else if (choice == 1) {
       __ESBMC_assume(1);
       _ltl2ba_state_var = 1;
    } else {
       __ESBMC_assume(0);
    }
    break;
  case 2:
    if (choice == 0) {
      __ESBMC_assume(1);
      _ltl2ba_state_var = 3;
    } else if (choice == 1) {
       __ESBMC_assume(!_ltl2ba_atomic_w1);
       _ltl2ba_state_var = 2;
    } else {
       __ESBMC_assume(0);
    }
    break;
  case 3:
    if (choice == 0) {
      __ESBMC_assume(1);
      _ltl2ba_state_var = 3;
    } else if (choice == 1) {
       __ESBMC_assume(!_ltl2ba_atomic_w1);
       _ltl2ba_state_var = 2;
    } else {
       __ESBMC_assume(0);
    }
    break;
  }
}

int _ltl2ba_surely_reject[4] = {0, 0, 0, 0};

int _ltl2ba_surely_accept[4] = {0, 0, 0, 0};

int _ltl2ba_stutter_accept[32] = {
   0, 0, 1, 1,
   0, 0, 1, 1,
   0, 0, 0, 0,
   0, 0, 0, 0,
   1, 1, 1, 1,
   0, 0, 1, 1,
   0, 0, 0, 0,
   0, 0, 0, 0,
};

int _ltl2ba_sym_to_id() {
   int id = 0;
   id |= (_ltl2ba_atomic_e2 << 2);
   id |= (_ltl2ba_atomic_w1 << 1);
   id |= (_ltl2ba_atomic_e1 << 0);
   return id; 
}

void _ltl2ba_result() {
   int reject_sure = _ltl2ba_surely_accept[_ltl2ba_state_var];
   __ESBMC_assert(!reject_sure, "ERROR SURE");
   
   int id = _ltl2ba_sym_to_id();
   int accept_stutter =_ltl2ba_stutter_accept[id * 4 + _ltl2ba_state_var];
   __ESBMC_assert(!accept_stutter, "ERROR MAYBE");
   int valid_sure = _ltl2ba_surely_reject[_ltl2ba_state_var];
   __ESBMC_assert(valid_sure, "VALID MAYBE");
   
   }


