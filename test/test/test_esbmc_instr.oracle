/* Generated by CIL v. 1.7.3 */
/* print_CIL_Input is false */

int *_ltl2ba_pointer_b  =    (int *)0;
int *_ltl2ba_pointer_a  =    (int *)0;
int _ltl2ba_active_p2  =    0;
int _ltl2ba_atomic_p2  =    0;
int _ltl2ba_active_p1  =    0;
int _ltl2ba_atomic_p1  =    0;
int _ltl2ba_active_pg  =    0;
int _ltl2ba_atomic_pg  =    1;
void __ESBMC_atomic_end(void) ;
void __ESBMC_atomic_begin(void) ;
int _ltl2ba_state_var  =    0;
int _ltl2ba_sym_to_id(void) ;
void _ltl2ba_transition(void) ;
void _ltl2ba_result(void) ;
#line 60 "/usr/include/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 63 "/usr/include/bits/pthreadtypes.h"
union pthread_attr_t {
   char __size[56] ;
   long __align ;
};
#line 69 "/usr/include/bits/pthreadtypes.h"
typedef union pthread_attr_t pthread_attr_t;
#line 234 "/usr/include/pthread.h"
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,3))) pthread_create)(pthread_t * __restrict  __newthread ,
                                                                                             pthread_attr_t const   * __restrict  __attr ,
                                                                                             void *(*__start_routine)(void * ) ,
                                                                                             void * __restrict  __arg ) ;
#line 243
extern  __attribute__((__noreturn__)) void pthread_exit(void *__retval ) ;
#line 251
extern int pthread_join(pthread_t __th , void **__thread_return ) ;
#line 3 "/home/nephe/Documents/Research/dev/baProduct/test/test/test.c"
int a  =    0;
#line 4 "/home/nephe/Documents/Research/dev/baProduct/test/test/test.c"
int b  =    1;
#line 6 "/home/nephe/Documents/Research/dev/baProduct/test/test/test.c"
int fg(int a___0 , int b___0 ) 
{ 


  {
#line 7
  return (a___0 != b___0);
}
}
#line 10 "/home/nephe/Documents/Research/dev/baProduct/test/test/test.c"
int fp1(void) 
{ 


  {
#line 11
  return (1);
}
}
#line 14 "/home/nephe/Documents/Research/dev/baProduct/test/test/test.c"
int fp2(void) 
{ 


  {
#line 15
  return (1);
}
}
#line 18 "/home/nephe/Documents/Research/dev/baProduct/test/test/test.c"
void *thread1(void *d ) 
{ 
  int energy_stored ;

  {
  {
#line 19
  energy_stored = 3;
#line 20
  __ESBMC_atomic_begin();
#line 20
  a = 1;
#line 20
  if (_ltl2ba_active_pg) {
#line 20
    _ltl2ba_atomic_pg = fg(*_ltl2ba_pointer_a, *_ltl2ba_pointer_b);
  }
#line 20
  _ltl2ba_transition();
#line 20
  __ESBMC_atomic_end();
#line 21
  __ESBMC_atomic_begin();
#line 21
  b = 0;
#line 21
  if (_ltl2ba_active_pg) {
#line 21
    _ltl2ba_atomic_pg = fg(*_ltl2ba_pointer_a, *_ltl2ba_pointer_b);
  }
#line 21
  _ltl2ba_transition();
#line 21
  __ESBMC_atomic_end();
  }
#line 22
  while (1) {
#line 23
    while (energy_stored > 0) {
#line 23
      energy_stored --;
    }
    {
#line 24
    __ESBMC_atomic_begin();
#line 24
    _ltl2ba_pointer_a = & a;
#line 24
    _ltl2ba_pointer_b = & b;
#line 24
    _ltl2ba_atomic_pg = fg(*_ltl2ba_pointer_a, *_ltl2ba_pointer_b);
#line 24
    _ltl2ba_atomic_p1 = fp1();
#line 24
    _ltl2ba_active_pg = (_Bool)1;
#line 24
    _ltl2ba_active_p1 = (_Bool)1;
#line 24
    _ltl2ba_transition();
#line 24
    __ESBMC_atomic_end();
    t1: 
#line 24
    energy_stored = 3;
    }
    {
    __ESBMC_atomic_begin();
    _ltl2ba_atomic_pg = (_Bool)1;
    _ltl2ba_atomic_p1 = (_Bool)0;
    _ltl2ba_active_pg = (_Bool)0;
    _ltl2ba_active_p1 = (_Bool)0;
    _ltl2ba_transition();
    __ESBMC_atomic_end();
    e1: 
    {

    }
    }
  }
#line 28
  pthread_exit((void *)0);
}
}
#line 31 "/home/nephe/Documents/Research/dev/baProduct/test/test/test.c"
void *thread2(void *d ) 
{ 
  int energy_stored ;

  {
  {
#line 33
  energy_stored = 3;
#line 34
  __ESBMC_atomic_begin();
#line 34
  b = 1;
#line 34
  if (_ltl2ba_active_pg) {
#line 34
    _ltl2ba_atomic_pg = fg(*_ltl2ba_pointer_a, *_ltl2ba_pointer_b);
  }
#line 34
  _ltl2ba_transition();
#line 34
  __ESBMC_atomic_end();
  }
#line 36
  while (1) {
#line 37
    while (energy_stored > 0) {
#line 37
      energy_stored --;
    }
    {
#line 38
    __ESBMC_atomic_begin();
#line 38
    _ltl2ba_atomic_p2 = fp2();
#line 38
    _ltl2ba_active_p2 = (_Bool)1;
#line 38
    _ltl2ba_transition();
#line 38
    __ESBMC_atomic_end();
    t2: 
#line 38
    energy_stored = 3;
    }
    {
    __ESBMC_atomic_begin();
    _ltl2ba_atomic_p2 = (_Bool)0;
    _ltl2ba_active_p2 = (_Bool)0;
    _ltl2ba_transition();
    __ESBMC_atomic_end();
    e2: 
    {

    }
    }
  }
#line 42
  pthread_exit((void *)0);
}
}
#line 45 "/home/nephe/Documents/Research/dev/baProduct/test/test/test.c"
int main(int argc , char **argv ) 
{ 
  pthread_t t1 ;
  pthread_t t2 ;

  {
#line 48
  pthread_create((pthread_t */* __restrict  */)(& t1), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & thread1, (void */* __restrict  */)((void *)0));
#line 49
  pthread_create((pthread_t */* __restrict  */)(& t2), (pthread_attr_t const   */* __restrict  */)((void *)0),
                 & thread2, (void */* __restrict  */)((void *)0));
#line 50
  pthread_join(t1, (void **)((void *)0));
#line 51
  pthread_join(t2, (void **)((void *)0));
  {
  __ESBMC_atomic_begin();
  _ltl2ba_result();
  __ESBMC_atomic_end();
#line 52
  return (0);
  }
}
}
void _ltl2ba_transition() {
  int choice = nondet_uint(); 
  switch (_ltl2ba_state_var) {
  case 0:
    if (choice == 0) {
      __ESBMC_assume(_ltl2ba_atomic_p1 && _ltl2ba_atomic_p2);
      _ltl2ba_state_var = 1;
    } else if (choice == 1) {
       __ESBMC_assume(1);
       _ltl2ba_state_var = 0;
    } else {
       __ESBMC_assume(0);
    }
    break;
  case 1:
    __ESBMC_assert(0, "ERROR_SURE");
    break;
  }
}

int _ltl2ba_surely_reject[2] = {0, 0};

int _ltl2ba_surely_accept[2] = {0, 1};

int _ltl2ba_stutter_accept[8] = {
   0, 1,
   0, 1,
   0, 1,
   1, 1,
};

int _ltl2ba_sym_to_id() {
   int id = 0;
   id |= (_ltl2ba_atomic_p2 << 1);
   id |= (_ltl2ba_atomic_p1 << 0);
   return id; 
}

void _ltl2ba_result() {
   int reject_sure = _ltl2ba_surely_accept[_ltl2ba_state_var];
   __ESBMC_assert(!reject_sure, "ERROR SURE");
   
   int id = _ltl2ba_sym_to_id();
   int accept_stutter =_ltl2ba_stutter_accept[id * 2 + _ltl2ba_state_var];
   __ESBMC_assert(!accept_stutter, "ERROR MAYBE");
   int valid_sure = _ltl2ba_surely_reject[_ltl2ba_state_var];
   __ESBMC_assert(valid_sure, "VALID MAYBE");
   
   }


